import fsp from 'node:fs/promises'
import path from 'node:path'
import { beforeEach, describe, expect, it, vi, type MockedFunction } from 'vitest'

import { CONFIG } from '../../server/src/lib/config.js'
import {
  getServerProperty,
  isWhitelistEnabled,
  readServerProperties,
  setServerProperty,
  setWhitelistEnabled,
  writeServerProperties,
} from '../../server/src/minecraft/serverProperties.js'

// Mock dei moduli
vi.mock('node:fs/promises')
vi.mock('../../server/src/lib/config.js', () => ({
  CONFIG: { MC_DIR: '/test/minecraft' },
}))

const mockFsp = vi.mocked(fsp)

describe('ServerProperties', () => {
  const testPropertiesPath = path.join(CONFIG.MC_DIR, 'server.properties')

  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('readServerProperties', () => {
    it('reads properties correctly from file', async () => {
      const mockContent = `#Minecraft server properties
gamemode=survival
difficulty=normal
white-list=false
max-players=20
`
      mockFsp.readFile.mockResolvedValue(mockContent)

      const properties = await readServerProperties()

      expect(mockFsp.readFile).toHaveBeenCalledWith(testPropertiesPath, 'utf8')
      expect(properties.get('gamemode')).toBe('survival')
      expect(properties.get('difficulty')).toBe('normal')
      expect(properties.get('white-list')).toBe('false')
      expect(properties.get('max-players')).toBe('20')
      expect(properties.has('#Minecraft')).toBe(false) // Comments ignored
    })

    it('handles missing file gracefully', async () => {
      mockFsp.readFile.mockRejectedValue(new Error('File not found'))

      const properties = await readServerProperties()

      expect(properties.size).toBe(0)
    })

    it('ignores comments and empty lines', async () => {
      const mockContent = `#This is a comment
# Another comment

gamemode=survival

#white-list=true
white-list=false
`
      mockFsp.readFile.mockResolvedValue(mockContent)

      const properties = await readServerProperties()

      expect(properties.size).toBe(2)
      expect(properties.get('gamemode')).toBe('survival')
      expect(properties.get('white-list')).toBe('false')
    })
  })

  describe('writeServerProperties', () => {
    it('writes properties to file in sorted order', async () => {
      const properties = new Map([
        ['white-list', 'true'],
        ['gamemode', 'survival'],
        ['max-players', '20'],
      ])

      await writeServerProperties(properties)

      expect(mockFsp.mkdir).toHaveBeenCalledWith(path.dirname(testPropertiesPath), {
        recursive: true,
      })
      expect(mockFsp.writeFile).toHaveBeenCalledWith(
        testPropertiesPath,
        expect.stringContaining('gamemode=survival\nmax-players=20\nwhite-list=true'),
        'utf8'
      )
    })

    it('includes header comments', async () => {
      const properties = new Map([['test', 'value']])

      await writeServerProperties(properties)

      const writtenContent = (mockFsp.writeFile as MockedFunction<typeof fsp.writeFile>).mock
        .calls[0]?.[1]
      expect(writtenContent).toContain('#Minecraft server properties')
      expect(writtenContent).toContain('#Generated by BasterdsLegacy')
    })
  })

  describe('getServerProperty', () => {
    it('returns property value when it exists', async () => {
      mockFsp.readFile.mockResolvedValue('white-list=true\ngamemode=survival')

      const value = await getServerProperty('white-list')

      expect(value).toBe('true')
    })

    it('returns null when property does not exist', async () => {
      mockFsp.readFile.mockResolvedValue('gamemode=survival')

      const value = await getServerProperty('white-list')

      expect(value).toBeNull()
    })
  })

  describe('setServerProperty', () => {
    it('sets property value', async () => {
      mockFsp.readFile.mockResolvedValue('gamemode=survival\nwhite-list=false')

      await setServerProperty('white-list', 'true')

      expect(mockFsp.writeFile).toHaveBeenCalled()
      const writtenContent = (mockFsp.writeFile as MockedFunction<typeof fsp.writeFile>).mock
        .calls[0]?.[1]
      expect(writtenContent).toContain('white-list=true')
      expect(writtenContent).toContain('gamemode=survival')
    })

    it('adds new property if it does not exist', async () => {
      mockFsp.readFile.mockResolvedValue('gamemode=survival')

      await setServerProperty('white-list', 'true')

      const writtenContent = (mockFsp.writeFile as MockedFunction<typeof fsp.writeFile>).mock
        .calls[0]?.[1]
      expect(writtenContent).toContain('white-list=true')
      expect(writtenContent).toContain('gamemode=survival')
    })
  })

  describe('isWhitelistEnabled', () => {
    it('returns true when whitelist is enabled', async () => {
      mockFsp.readFile.mockResolvedValue('white-list=true')

      const enabled = await isWhitelistEnabled()

      expect(enabled).toBe(true)
    })

    it('returns false when whitelist is disabled', async () => {
      mockFsp.readFile.mockResolvedValue('white-list=false')

      const enabled = await isWhitelistEnabled()

      expect(enabled).toBe(false)
    })

    it('returns false when property is missing', async () => {
      mockFsp.readFile.mockResolvedValue('gamemode=survival')

      const enabled = await isWhitelistEnabled()

      expect(enabled).toBe(false)
    })
  })

  describe('setWhitelistEnabled', () => {
    it('enables whitelist', async () => {
      mockFsp.readFile.mockResolvedValue('white-list=false')

      await setWhitelistEnabled(true)

      const writtenContent = (mockFsp.writeFile as MockedFunction<typeof fsp.writeFile>).mock
        .calls[0]?.[1]
      expect(writtenContent).toContain('white-list=true')
    })

    it('disables whitelist', async () => {
      mockFsp.readFile.mockResolvedValue('white-list=true')

      await setWhitelistEnabled(false)

      const writtenContent = (mockFsp.writeFile as MockedFunction<typeof fsp.writeFile>).mock
        .calls[0]?.[1]
      expect(writtenContent).toContain('white-list=false')
    })
  })
})
