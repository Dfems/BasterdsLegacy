import { useState, useContext, useEffect, useRef, useCallback, type FormEvent, type JSX } from 'react';
import { useNavigate } from 'react-router-dom';
import useLanguage from '../hooks/useLanguage';
import AuthContext from '../contexts/AuthContext';
import '../styles/App.css';

const OS_TYPE = import.meta.env.VITE_OS_TYPE ?? 'linux';

export default function ConsolePage(): JSX.Element {
  const { t } = useLanguage();
  const { token } = useContext(AuthContext);
  const navigate = useNavigate();

  const [command, setCommand] = useState('');
  const [output, setOutput] = useState('');
  const [busy, setBusy] = useState(false);
  const outputRef = useRef<HTMLTextAreaElement>(null);

  // Redirect to login if unauthenticated
  useEffect(() => {
    if (!token) navigate('/login', { replace: true });
  }, [token, navigate]);

  // Auto-scroll on output change
  useEffect(() => {
    const el = outputRef.current;
    if (el) el.scrollTop = el.scrollHeight;
  }, [output]);

  // Stream command output
  const streamCommand = useCallback(async (cmd: string) => {
    const resp = await fetch('/api/console', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ command: cmd }),
    });

    if (!resp.ok) {
      const { error } = await resp.json().catch(() => ({}));
      throw new Error(error ?? resp.statusText);
    }

    const reader = resp.body!.getReader();
    const decoder = new TextDecoder('utf-8');
    let done = false;

    while (!done) {
      const { value, done: doneReading } = await reader.read();
      if (value) {
        setOutput(prev => prev + decoder.decode(value, { stream: true }));
      }
      done = doneReading;
    }
  }, [token]);

  // Execute arbitrary command
  const execute = useCallback(async (cmd: string) => {
    const trimmed = cmd.trim();
    if (!trimmed) return;

    if (trimmed === 'clear') {
      setOutput('');
      return;
    }

    setOutput(prev => prev + `> ${trimmed}\n`);

    try {
      await streamCommand(trimmed);
      setOutput(prev => prev + '\n');
    } catch (err) {
      setOutput(prev => prev + `\nErrore: ${(err as Error).message}\n`);
    }
  }, [streamCommand]);

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    execute(command);
    setCommand('');
  };

  // Build install commands
  const buildJvmArgs = (minGb: string, maxGb: string): string => `-Xms${minGb}G -Xmx${maxGb}G`;

  const runInstall = useCallback(async () => {
    const jar = prompt('Nome del file JAR:');
    if (!jar) return alert('Nessun file JAR fornito.');

    const minGb = prompt('RAM minima (GB):');
    const maxGb = prompt('RAM massima (GB):');
    if (!minGb || !maxGb) return alert('Valori di RAM non validi.');

    setBusy(true);
    try {
      // Install server
      await execute(`java -jar ${jar} --installServer`);

      // Configure JVM args
      const args = buildJvmArgs(minGb, maxGb);
      const fileCmd = OS_TYPE === 'windows'
        ? `echo.>>user_jvm_args.txt & echo ${args}>>user_jvm_args.txt`
        : `echo "" >> user_jvm_args.txt && echo "${args}" >> user_jvm_args.txt`;
      await execute(fileCmd);

      // Remove 'pause' on Windows
      if (OS_TYPE === 'windows') {
        const removePause = `findstr /V /C:"pause" run.bat > run.tmp && move /Y run.tmp run.bat`;
        await execute(removePause);
      }

      // Generate eula.txt with current CEST timestamp
      const now = new Date();
      const days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
      const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
      const day = days[now.getDay()];
      const month = months[now.getMonth()];
      const dateNum = now.getDate();
      const pad = (n: number) => n.toString().padStart(2, '0');
      const hours = pad(now.getHours());
      const minutes = pad(now.getMinutes());
      const seconds = pad(now.getSeconds());
      const year = now.getFullYear();
      const formattedDate = `${day} ${month} ${dateNum} ${hours}:${minutes}:${seconds} CEST ${year}`;

      const eulaCmd = OS_TYPE === 'windows'
        ? `echo #By changing the setting below to TRUE you are indicating your agreement to our EULA (https://aka.ms/MinecraftEULA).>eula.txt & echo #${formattedDate}>>eula.txt & echo #Generated by Dfems>>eula.txt & echo eula=true>>eula.txt`
        : `cat <<EOF > eula.txt
#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://aka.ms/MinecraftEULA).
#${formattedDate}
#Generated by Dfems
eula=true
EOF`;
      await execute(eulaCmd);

      setOutput(prev => prev + `\nInstallazione e configurazione completate.\n`);
      alert(`Installazione completata. user_jvm_args.txt aggiornato con: ${args}`);
    } finally {
      setBusy(false);
    }
  }, [execute]);

  const runServer = useCallback(() => {
    const cmd = OS_TYPE === 'windows' ? '.\\run.bat nogui' : './run.sh nogui';
    execute(cmd);
  }, [execute]);

  const clearOutput = () => setOutput('');

  const deleteServer = useCallback(async () => {
    if (!confirm('Eliminare tutti i file del server?')) return;
    const cmd = OS_TYPE === 'windows'
      ? 'del /Q *.* & for /D %i in (*) do rmdir /S /Q "%i"'
      : 'rm -rf .* *';

    await execute(cmd);
    setOutput(prev => prev + 'Tutti i file del server sono stati eliminati.\n');
  }, [execute]);

  const shortcuts = [
    { label: 'Install', action: runInstall, disabled: busy },
    { label: 'Run', action: runServer },
    { label: 'Clear', action: clearOutput },
    { label: 'Delete Server', action: deleteServer, className: 'danger' },
  ];

  return (
    <div className="console-container">
      <aside className="sidebar-buttons">
        {shortcuts.map(({ label, action, disabled, className }) => (
          <button
            key={label}
            onClick={action}
            disabled={disabled}
            className={className}
          >{busy && label === 'Install' ? `${label}â€¦` : label}</button>
        ))}
      </aside>

      <main className="console-main">
        <h1>{t.consoleTitle}</h1>

        <form onSubmit={handleSubmit} className="command-form">
          <label htmlFor="command">{t.commandLabel}</label>
          <input
            id="command"
            type="text"
            value={command}
            onChange={e => setCommand(e.target.value)}
            disabled={busy}
            required
          />
        </form>

        <h2>{t.consoleOutputTitle}</h2>
        <textarea
          ref={outputRef}
          readOnly
          rows={25}
          cols={130}
          value={output}
          className="console-output"
        />
      </main>
    </div>
  );
}
