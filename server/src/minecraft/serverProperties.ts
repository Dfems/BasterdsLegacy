import fsp from 'node:fs/promises'
import path from 'node:path'

import { CONFIG } from '../lib/config.js'

const PROPERTIES_FILE = path.join(CONFIG.MC_DIR, 'server.properties')

export type ServerProperty = {
  key: string
  value: string
}

/**
 * Legge il file server.properties e restituisce una Map delle proprietà
 */
export const readServerProperties = async (): Promise<Map<string, string>> => {
  const properties = new Map<string, string>()

  try {
    const content = await fsp.readFile(PROPERTIES_FILE, 'utf8')
    const lines = content.split('\n')

    for (const line of lines) {
      const trimmed = line.trim()
      // Ignora linee vuote e commenti
      if (!trimmed || trimmed.startsWith('#')) continue

      const equalIndex = trimmed.indexOf('=')
      if (equalIndex === -1) continue

      const key = trimmed.substring(0, equalIndex).trim()
      const value = trimmed.substring(equalIndex + 1).trim()
      properties.set(key, value)
    }
  } catch (error) {
    // Se il file non esiste o non può essere letto, restituisce una Map vuota
    console.warn(
      'Could not read server.properties:',
      error instanceof Error ? error.message : String(error)
    )
  }

  return properties
}

/**
 * Scrive le proprietà nel file server.properties
 */
export const writeServerProperties = async (properties: Map<string, string>): Promise<void> => {
  const lines: string[] = ['#Minecraft server properties', '#Generated by BasterdsLegacy', '']

  // Ordina le chiavi alfabeticamente per consistenza
  const sortedKeys = Array.from(properties.keys()).sort()

  for (const key of sortedKeys) {
    const value = properties.get(key)
    if (value !== undefined) {
      lines.push(`${key}=${value}`)
    }
  }

  lines.push('') // Linea vuota finale

  // Crea la directory se non esiste
  await fsp.mkdir(path.dirname(PROPERTIES_FILE), { recursive: true })
  await fsp.writeFile(PROPERTIES_FILE, lines.join('\n'), 'utf8')
}

/**
 * Ottiene il valore di una specifica proprietà
 */
export const getServerProperty = async (key: string): Promise<string | null> => {
  const properties = await readServerProperties()
  return properties.get(key) ?? null
}

/**
 * Imposta il valore di una specifica proprietà
 */
export const setServerProperty = async (key: string, value: string): Promise<void> => {
  const properties = await readServerProperties()
  properties.set(key, value)
  await writeServerProperties(properties)
}

/**
 * Controlla se la whitelist è abilitata nel server.properties
 */
export const isWhitelistEnabled = async (): Promise<boolean> => {
  const value = await getServerProperty('white-list')
  return value === 'true'
}

/**
 * Abilita o disabilita la whitelist nel server.properties
 */
export const setWhitelistEnabled = async (enabled: boolean): Promise<void> => {
  await setServerProperty('white-list', enabled ? 'true' : 'false')
}
